
cmake_minimum_required(VERSION 3.5)
project(boost_spirit)
include(CMakePackageConfigHelpers)

find_package(boost_iterator)
find_package(boost_locale)
find_package(boost_tti)
find_package(boost_concept_check)
find_package(boost_io)
find_package(boost_serialization)
find_package(boost_array)
find_package(boost_unordered)
find_package(boost_iostreams)
find_package(boost_utility)
find_package(boost_regex)
find_package(boost_static_assert)
find_package(boost_predef)
find_package(boost_proto)
find_package(boost_type_traits)
find_package(boost_smart_ptr)
find_package(boost_config)
find_package(boost_math)
find_package(boost_foreach)
find_package(boost_function)
find_package(boost_core)
find_package(boost_phoenix)
find_package(boost_mpl)
find_package(boost_filesystem)
find_package(boost_variant)
find_package(boost_assert)
find_package(boost_fusion)
find_package(boost_preprocessor)
find_package(boost_integer)
find_package(boost_optional)
find_package(boost_pool)
find_package(boost_function_types)
find_package(boost_algorithm)
find_package(boost_thread)
find_package(boost_range)
find_package(boost_typeof)
find_package(boost_endian)
find_package(boost_lexical_cast)
find_package(boost_throw_exception)

add_library(boost_spirit INTERFACE
)
add_library(boost::spirit ALIAS boost_spirit)
set_property(TARGET boost_spirit PROPERTY EXPORT_NAME spirit)

target_include_directories(boost_spirit INTERFACE
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
)

if(boost_iterator_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::iterator)
endif()
if(boost_locale_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::locale)
endif()
if(boost_tti_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::tti)
endif()
if(boost_concept_check_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::concept_check)
endif()
if(boost_io_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::io)
endif()
if(boost_serialization_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::serialization)
endif()
if(boost_array_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::array)
endif()
if(boost_unordered_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::unordered)
endif()
if(boost_iostreams_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::iostreams)
endif()
if(boost_utility_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::utility)
endif()
if(boost_regex_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::regex)
endif()
if(boost_static_assert_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::static_assert)
endif()
if(boost_predef_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::predef)
endif()
if(boost_proto_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::proto)
endif()
if(boost_type_traits_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::type_traits)
endif()
if(boost_smart_ptr_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::smart_ptr)
endif()
if(boost_config_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::config)
endif()
if(boost_math_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::math)
endif()
if(boost_foreach_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::foreach)
endif()
if(boost_function_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::function)
endif()
if(boost_core_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::core)
endif()
if(boost_phoenix_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::phoenix)
endif()
if(boost_mpl_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::mpl)
endif()
if(boost_filesystem_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::filesystem)
endif()
if(boost_variant_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::variant)
endif()
if(boost_assert_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::assert)
endif()
if(boost_fusion_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::fusion)
endif()
if(boost_preprocessor_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::preprocessor)
endif()
if(boost_integer_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::integer)
endif()
if(boost_optional_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::optional)
endif()
if(boost_pool_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::pool)
endif()
if(boost_function_types_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::function_types)
endif()
if(boost_algorithm_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::algorithm)
endif()
if(boost_thread_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::thread)
endif()
if(boost_range_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::range)
endif()
if(boost_typeof_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::typeof)
endif()
if(boost_endian_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::endian)
endif()
if(boost_lexical_cast_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::lexical_cast)
endif()
if(boost_throw_exception_FOUND)
target_link_libraries(boost_spirit INTERFACE boost::throw_exception)
endif()



install(DIRECTORY include/ DESTINATION include)

install(TARGETS boost_spirit EXPORT boost_spirit-targets
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    INCLUDES DESTINATION include
)

install(EXPORT boost_spirit-targets
  FILE boost_spirit-targets.cmake
  NAMESPACE boost::
  DESTINATION lib/cmake/boost_spirit
)

file(WRITE "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "include(CMakeFindDependencyMacro)")
if(boost_iterator_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_iterator)
")
endif()
if(boost_locale_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_locale)
")
endif()
if(boost_tti_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_tti)
")
endif()
if(boost_concept_check_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_concept_check)
")
endif()
if(boost_io_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_io)
")
endif()
if(boost_serialization_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_serialization)
")
endif()
if(boost_array_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_array)
")
endif()
if(boost_unordered_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_unordered)
")
endif()
if(boost_iostreams_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_iostreams)
")
endif()
if(boost_utility_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_utility)
")
endif()
if(boost_regex_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_regex)
")
endif()
if(boost_static_assert_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_static_assert)
")
endif()
if(boost_predef_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_predef)
")
endif()
if(boost_proto_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_proto)
")
endif()
if(boost_type_traits_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_type_traits)
")
endif()
if(boost_smart_ptr_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_smart_ptr)
")
endif()
if(boost_config_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_config)
")
endif()
if(boost_math_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_math)
")
endif()
if(boost_foreach_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_foreach)
")
endif()
if(boost_function_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_function)
")
endif()
if(boost_core_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_core)
")
endif()
if(boost_phoenix_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_phoenix)
")
endif()
if(boost_mpl_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_mpl)
")
endif()
if(boost_filesystem_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_filesystem)
")
endif()
if(boost_variant_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_variant)
")
endif()
if(boost_assert_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_assert)
")
endif()
if(boost_fusion_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_fusion)
")
endif()
if(boost_preprocessor_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_preprocessor)
")
endif()
if(boost_integer_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_integer)
")
endif()
if(boost_optional_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_optional)
")
endif()
if(boost_pool_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_pool)
")
endif()
if(boost_function_types_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_function_types)
")
endif()
if(boost_algorithm_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_algorithm)
")
endif()
if(boost_thread_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_thread)
")
endif()
if(boost_range_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_range)
")
endif()
if(boost_typeof_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_typeof)
")
endif()
if(boost_endian_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_endian)
")
endif()
if(boost_lexical_cast_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_lexical_cast)
")
endif()
if(boost_throw_exception_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
find_package(boost_throw_exception)
")
endif()


file(APPEND "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake" "
include(\"\${CMAKE_CURRENT_LIST_DIR}/boost_spirit-targets.cmake\")
")

write_basic_package_version_file("${PROJECT_BINARY_DIR}/boost_spirit-config-version.cmake"
  VERSION 1.64
  COMPATIBILITY AnyNewerVersion
  )

install(FILES
    "${PROJECT_BINARY_DIR}/boost_spirit-config.cmake"
    "${PROJECT_BINARY_DIR}/boost_spirit-config-version.cmake"
  DESTINATION lib/cmake/boost_spirit
)

